(dp1
S'output'
p2
S'<type \'exceptions.RuntimeError\'> Failure to connect, tried 5 times:\nTraceback (most recent call last):\n  File "/Users/sepehrtaheri/PycharmProjects/adguru/web2py/gluon/dal.py", line 7845, in __init__\n    self._adapter = ADAPTERS[self._dbname](**kwargs)\n  File "/Users/sepehrtaheri/PycharmProjects/adguru/web2py/gluon/dal.py", line 688, in __call__\n    obj = super(AdapterMeta, cls).__call__(*args, **kwargs)\n  File "/Users/sepehrtaheri/PycharmProjects/adguru/web2py/gluon/dal.py", line 2728, in __init__\n    if do_connect: self.reconnect()\n  File "/Users/sepehrtaheri/PycharmProjects/adguru/web2py/gluon/dal.py", line 648, in reconnect\n    self.connection = f()\n  File "/Users/sepehrtaheri/PycharmProjects/adguru/web2py/gluon/dal.py", line 2726, in connector\n    return self.driver.connect(**driver_args)\n  File "/Users/sepehrtaheri/PycharmProjects/adguru/web2py/gluon/contrib/pymysql/__init__.py", line 93, in Connect\n    return Connection(*args, **kwargs)\n  File "/Users/sepehrtaheri/PycharmProjects/adguru/web2py/gluon/contrib/pymysql/connections.py", line 575, in __init__\n    self._connect()\n  File "/Users/sepehrtaheri/PycharmProjects/adguru/web2py/gluon/contrib/pymysql/connections.py", line 743, in _connect\n    raise OperationalError(2003, "Can\'t connect to MySQL server on %r (%s)" % (self.host, e.args[0]))\nOperationalError: (2003, "Can\'t connect to MySQL server on \'db4free.net\' (8)")\n'
p3
sS'layer'
p4
S'/Users/sepehrtaheri/PycharmProjects/adguru/web2py/applications/adguru/models/db.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n\n# ########################################################################\n# # This scaffolding model makes your app work on Google App Engine too\n## File is released under public domain and you can use without limitations\n#########################################################################\n\n## if SSL/HTTPS is properly configured and you want all HTTP requests to\n## be redirected to HTTPS, uncomment the line below:\n# request.requires_https()\n\nif not request.env.web2py_runtime_gae:\n    ## if NOT running on Google App Engine use SQLite or other DB\n    db = DAL(\'mysql://supsep:sepehr@db4free.net:3306/vancouver\')\nelse:\n    ## connect to Google BigTable (optional \'google:datastore://namespace\')\n    db = DAL(\'google:datastore\')\n    ## store sessions and tickets there\n    session.connect(request, response, db=db)\n    ## or store session in Memcache, Redis, etc.\n    ## from gluon.contrib.memdb import MEMDB\n    ## from google.appengine.api.memcache import Client\n    ## session.connect(request, response, db = MEMDB(Client()))\n\n## by default give a view/generic.extension to all actions from localhost\n## none otherwise. a pattern can be \'controller/function.extension\'\nresponse.generic_patterns = [\'*\'] if request.is_local else []\n## (optional) optimize handling of static files\n# response.optimize_css = \'concat,minify,inline\'\n# response.optimize_js = \'concat,minify,inline\'\n## (optional) static assets folder versioning\n# response.static_version = \'0.0.0\'\n#########################################################################\n## Here is sample code if you need for\n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - old style crud actions\n## (more options discussed in gluon/tools.py)\n#########################################################################\n\nfrom gluon.tools import Auth, Crud, Service, PluginManager, prettydate\n\nauth = Auth(db)\ncrud, service, plugins = Crud(db), Service(), PluginManager()\n\nauth.settings.extra_fields[\'auth_user\'] = [\n    Field(\'city\'),\n    Field(\'zip\'),\n    Field(\'phone\', requires=IS_MATCH(\'[\\d\\-\\(\\) ]+\')),\n    Field(\'score\', \'double\',  writable=False, readable=False)]\n\n## create all tables needed by auth if not custom tables\nauth.define_tables(username=False, signature=False)\n\n\n## configure email\nmail = auth.settings.mailer\nmail.settings.server = \'logging\' or \'smtp.gmail.com:587\'\nmail.settings.sender = \'you@gmail.com\'\nmail.settings.login = \'username:password\'\n\n## Cloudinary CDN for Images\nimport cloudinary\nimport cloudinary.uploader\nimport cloudinary.api\ncloudinary.config(\n  cloud_name = "adguru",\n  api_key = "924878893435153",\n  api_secret = "XyFdjTfzYK5cHAkMGBERFe8EMIM"\n)\n\n\n## configure auth policy\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = False\nauth.settings.reset_password_requires_verification = True\n\n#auth.settings.registration_requires_verification = True\n#auth.settings.registration_requires_approval = False\n#auth.settings.reset_password_requires_verification = True\n#auth.messages.verify_email = \'Click on the link http://\' +     request.env.http_host +     URL(r=request,c=\'default\',f=\'user\',args=[\'verify_email\']) +     \'/%(key)s to verify your email\'\n#auth.messages.reset_password = \'Click on the link http://\' +     request.env.http_host +     URL(r=request,c=\'default\',f=\'user\',args=[\'reset_password\']) +     \'/%(key)s to reset your password\'\n\n## if you need to use OpenID, Facebook, MySpace, Twitter, Linkedin, etc.\n## register with janrain.com, write your domain:api_key in private/janrain.key\nfrom gluon.contrib.login_methods.rpx_account import use_janrain\n\nuse_janrain(auth, filename=\'https://listem.rpxnow.com/fd4160f7ded2d430ae0500004e2d0519feae731e\')\n\n\n#########################################################################\n## Define your tables below (or better in another model file) for example\n##\n## >>> db.define_table(\'mytable\',Field(\'myfield\',\'string\'))\n##\n## Fields can be \'string\',\'text\',\'password\',\'integer\',\'double\',\'boolean\'\n##       \'date\',\'time\',\'datetime\',\'blob\',\'upload\', \'reference TABLENAME\'\n## There is an implicit \'id integer autoincrement\' field\n## Consult manual for more options, validators, etc.\n##\n## More API examples for controllers:\n##\n## >>> db.mytable.insert(myfield=\'value\')\n## >>> rows=db(db.mytable.myfield==\'value\').select(db.mytable.ALL)\n## >>> for row in rows: print row.id, row.myfield\n#########################################################################\n\n## after defining tables, uncomment below to enable auditing\n# auth.enable_record_versioning(db)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/sepehrtaheri/PycharmProjects/adguru/web2py/gluon/restricted.py", line 220, in restricted\n    exec ccode in environment\n  File "/Users/sepehrtaheri/PycharmProjects/adguru/web2py/applications/adguru/models/db.py", line 14, in <module>\n    db = DAL(\'mysql://supsep:sepehr@db4free.net:3306/vancouver\')\n  File "/Users/sepehrtaheri/PycharmProjects/adguru/web2py/gluon/dal.py", line 7867, in __init__\n    raise RuntimeError("Failure to connect, tried %d times:\\n%s" % (attempts, tb))\nRuntimeError: Failure to connect, tried 5 times:\nTraceback (most recent call last):\n  File "/Users/sepehrtaheri/PycharmProjects/adguru/web2py/gluon/dal.py", line 7845, in __init__\n    self._adapter = ADAPTERS[self._dbname](**kwargs)\n  File "/Users/sepehrtaheri/PycharmProjects/adguru/web2py/gluon/dal.py", line 688, in __call__\n    obj = super(AdapterMeta, cls).__call__(*args, **kwargs)\n  File "/Users/sepehrtaheri/PycharmProjects/adguru/web2py/gluon/dal.py", line 2728, in __init__\n    if do_connect: self.reconnect()\n  File "/Users/sepehrtaheri/PycharmProjects/adguru/web2py/gluon/dal.py", line 648, in reconnect\n    self.connection = f()\n  File "/Users/sepehrtaheri/PycharmProjects/adguru/web2py/gluon/dal.py", line 2726, in connector\n    return self.driver.connect(**driver_args)\n  File "/Users/sepehrtaheri/PycharmProjects/adguru/web2py/gluon/contrib/pymysql/__init__.py", line 93, in Connect\n    return Connection(*args, **kwargs)\n  File "/Users/sepehrtaheri/PycharmProjects/adguru/web2py/gluon/contrib/pymysql/connections.py", line 575, in __init__\n    self._connect()\n  File "/Users/sepehrtaheri/PycharmProjects/adguru/web2py/gluon/contrib/pymysql/connections.py", line 743, in _connect\n    raise OperationalError(2003, "Can\'t connect to MySQL server on %r (%s)" % (self.host, e.args[0]))\nOperationalError: (2003, "Can\'t connect to MySQL server on \'db4free.net\' (8)")\n\n'
p11
s.